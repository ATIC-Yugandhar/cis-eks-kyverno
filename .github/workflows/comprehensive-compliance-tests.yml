name: Comprehensive CIS EKS Compliance Tests with Kube-bench

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_kind_tests:
        description: 'Run Kind cluster tests'
        required: false
        default: true
        type: boolean
      run_opentofu_tests:
        description: 'Run OpenTofu compliance tests'
        required: false
        default: true
        type: boolean
      run_kube_bench:
        description: 'Run kube-bench CIS compliance scans'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write  # Required for SARIF upload
  actions: read

env:
  KYVERNO_VERSION: "1.13.6"

jobs:
  unit-tests:
    name: Unit Tests (Policy Validation)
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.unit-tests-run.outputs.exit_code }}
      outcome: ${{ steps.unit-tests-run.outputs.outcome }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Kyverno CLI
      id: setup-kyverno
      run: |
        curl -LO "https://github.com/kyverno/kyverno/releases/download/v${{ env.KYVERNO_VERSION }}/kyverno-cli_v${{ env.KYVERNO_VERSION }}_linux_x86_64.tar.gz"
        tar -xzf kyverno-cli_v${{ env.KYVERNO_VERSION }}_linux_x86_64.tar.gz
        sudo mv kyverno /usr/local/bin/
        kyverno version
        
    - name: Run policy unit tests
      id: unit-tests-run
      continue-on-error: true
      run: |
        # Ensure all scripts are executable
        chmod +x scripts/*.sh
        
        # Debug: Environment info
        echo "=== Environment Debug Info ==="
        echo "Current directory: $(pwd)"
        echo "Script exists: $([ -f scripts/test-kubernetes-policies.sh ] && echo 'YES' || echo 'NO')"
        echo "Tests directory exists: $([ -d tests/kubernetes ] && echo 'YES' || echo 'NO')"
        echo "Number of test files: $(find tests/kubernetes -name 'kyverno-test.yaml' 2>/dev/null | wc -l || echo 0)"
        echo "Kube-bench directory exists: $([ -d kube-bench ] && echo 'YES' || echo 'NO')"
        echo "============================="
        
        # Run comprehensive test script
        EXIT_CODE=0
        ./scripts/test-kubernetes-policies.sh || EXIT_CODE=$?
        
        echo "Test script exit code: $EXIT_CODE"
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        if [ $EXIT_CODE -eq 0 ]; then
          echo "outcome=success" >> $GITHUB_OUTPUT
        else
          echo "outcome=failure" >> $GITHUB_OUTPUT
        fi
        
        # Always exit 0 here since we're using continue-on-error
        exit 0
        
    - name: Capture test status
      if: always()
      run: |
        mkdir -p reports/policy-tests
        echo "Unit Tests Exit Code: ${{ steps.unit-tests-run.outputs.exit_code || 'N/A' }}" > reports/policy-tests/test-status.txt
        echo "Unit Tests Result: ${{ steps.unit-tests-run.outcome }}" >> reports/policy-tests/test-status.txt
        echo "Timestamp: $(date)" >> reports/policy-tests/test-status.txt
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          reports/policy-tests/
        retention-days: 30

  opentofu-tests:
    name: Plan Time tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_opentofu_tests != 'false' }}
    outputs:
      exit_code: ${{ steps.opentofu-tests-run.outputs.exit_code }}
      outcome: ${{ steps.opentofu-tests-run.outputs.outcome }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.6.1"
        
    - name: Setup Kyverno CLI
      id: setup-kyverno
      run: |
        curl -LO "https://github.com/kyverno/kyverno/releases/download/v${{ env.KYVERNO_VERSION }}/kyverno-cli_v${{ env.KYVERNO_VERSION }}_linux_x86_64.tar.gz"
        tar -xzf kyverno-cli_v${{ env.KYVERNO_VERSION }}_linux_x86_64.tar.gz
        sudo mv kyverno /usr/local/bin/
        kyverno version
        
    - name: Verify OpenTofu plan files
      run: |
        echo "=== Checking for OpenTofu plan files ==="
        echo "Compliant plan: $([ -f 'opentofu/compliant/tofuplan.json' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "Non-compliant plan: $([ -f 'opentofu/noncompliant/tofuplan.json' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        
        # If plan files don't exist, provide helpful error message
        if [ ! -f "opentofu/compliant/tofuplan.json" ] || [ ! -f "opentofu/noncompliant/tofuplan.json" ]; then
          echo "⚠️ OpenTofu plan files are missing. They should be committed to the repository."
          echo "To generate them locally, run:"
          echo "  cd opentofu/compliant && tofu plan -out=tofuplan.binary && tofu show -json tofuplan.binary > tofuplan.json"
          echo "  cd ../noncompliant && tofu plan -out=tofuplan.binary && tofu show -json tofuplan.binary > tofuplan.json"
          echo ""
          echo "Files will be checked in the test script..."
        fi
        
    - name: Run OpenTofu compliance tests
      id: opentofu-tests-run
      continue-on-error: true
      env:
        KYVERNO_EXPERIMENTAL: true
      run: |
        chmod +x scripts/test-opentofu-policies.sh
        EXIT_CODE=0
        ./scripts/test-opentofu-policies.sh || EXIT_CODE=$?
        echo "Test script exit code: $EXIT_CODE"
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        if [ $EXIT_CODE -eq 0 ]; then
          echo "outcome=success" >> $GITHUB_OUTPUT
        else
          echo "outcome=failure" >> $GITHUB_OUTPUT
        fi
        # Always exit 0 here since we're using continue-on-error
        exit 0
        
    - name: Capture test status
      if: always()
      run: |
        mkdir -p reports/opentofu-compliance
        echo "OpenTofu Tests Exit Code: ${{ steps.opentofu-tests-run.outputs.exit_code || 'N/A' }}" > reports/opentofu-compliance/test-status.txt
        echo "OpenTofu Tests Result: ${{ steps.opentofu-tests-run.outcome }}" >> reports/opentofu-compliance/test-status.txt
        echo "Timestamp: $(date)" >> reports/opentofu-compliance/test-status.txt
        
    - name: Upload OpenTofu test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: opentofu-test-results
        path: |
          reports/opentofu-compliance/
        retention-days: 30

  kind-cluster-tests:
    name: Kind Cluster Integration Tests with Kube-bench
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_kind_tests != 'false' }}
    outputs:
      exit_code: ${{ steps.kind-tests-run.outputs.exit_code }}
      outcome: ${{ steps.kind-tests-run.outputs.outcome }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker
      run: |
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        
    - name: Setup Kind
      run: |
        # Install Kind
        [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        kind version
        
    - name: Setup kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        
    - name: Setup Kyverno CLI
      id: setup-kyverno
      run: |
        curl -LO "https://github.com/kyverno/kyverno/releases/download/v${{ env.KYVERNO_VERSION }}/kyverno-cli_v${{ env.KYVERNO_VERSION }}_linux_x86_64.tar.gz"
        tar -xzf kyverno-cli_v${{ env.KYVERNO_VERSION }}_linux_x86_64.tar.gz
        sudo mv kyverno /usr/local/bin/
        kyverno version
        
    - name: Setup yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq
        yq --version

    - name: Setup jq for kube-bench result parsing
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        jq --version
        

    - name: Run Kind cluster tests with kube-bench
      id: kind-tests-run
      continue-on-error: true
      env:
        GITHUB_ACTIONS: true
        CI: true
        RUN_KUBE_BENCH: ${{ github.event.inputs.run_kube_bench != 'false' && 'true' || 'false' }}
      run: |
        chmod +x scripts/test-kind-cluster.sh
        # Note: kube-bench/run-kube-bench.sh is integrated into test-kind-cluster.sh
        EXIT_CODE=0
        export KEEP_CLUSTER=false
        
        echo "🔍 Running Kind cluster tests with kube-bench integration..."
        echo "Kube-bench enabled: $RUN_KUBE_BENCH"
        
        ./scripts/test-kind-cluster.sh || EXIT_CODE=$?
        echo "Test script exit code: $EXIT_CODE"
        echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
        if [ $EXIT_CODE -eq 0 ]; then
          echo "outcome=success" >> $GITHUB_OUTPUT
        else
          echo "outcome=failure" >> $GITHUB_OUTPUT
        fi
        # Always exit 0 here since we're using continue-on-error
        exit 0
        
    - name: Capture test status
      if: always()
      run: |
        mkdir -p reports/kind-cluster
        echo "Kind Tests Exit Code: ${{ steps.kind-tests-run.outputs.exit_code || 'N/A' }}" > reports/kind-cluster/test-status.txt
        echo "Kind Tests Result: ${{ steps.kind-tests-run.outcome }}" >> reports/kind-cluster/test-status.txt
        echo "Kube-bench Integration: ${{ github.event.inputs.run_kube_bench != 'false' && 'Enabled' || 'Disabled' }}" >> reports/kind-cluster/test-status.txt
        echo "Timestamp: $(date)" >> reports/kind-cluster/test-status.txt
        
    - name: Upload Kind cluster test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kind-cluster-test-results
        path: |
          reports/kind-cluster/
        retention-days: 30
        
    - name: Cleanup Kind cluster
      if: always()
      run: |
        kind delete clusters --all || true

  comprehensive-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [unit-tests, opentofu-tests, kind-cluster-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Setup report environment
      run: |
        mkdir -p reports/comprehensive
        
        # Copy unit test results if available - preserve directory structure
        if [ -d "artifacts/unit-test-results" ]; then
          mkdir -p reports/policy-tests
          cp -r artifacts/unit-test-results/. reports/policy-tests/ 2>/dev/null || true
          # Also copy to root for backward compatibility
          cp -r artifacts/unit-test-results/. reports/ 2>/dev/null || true
        fi
        
        # Copy OpenTofu test results if available - preserve directory structure
        if [ -d "artifacts/opentofu-test-results" ]; then
          mkdir -p reports/opentofu-compliance
          cp -r artifacts/opentofu-test-results/. reports/opentofu-compliance/ 2>/dev/null || true
          # Also copy to root for backward compatibility
          cp -r artifacts/opentofu-test-results/. reports/ 2>/dev/null || true
        fi
        
        # Copy Kind cluster test results if available - preserve directory structure
        if [ -d "artifacts/kind-cluster-test-results" ]; then
          mkdir -p reports/kind-cluster
          cp -r artifacts/kind-cluster-test-results/. reports/kind-cluster/ 2>/dev/null || true
          # Also copy to root for backward compatibility
          cp -r artifacts/kind-cluster-test-results/. reports/ 2>/dev/null || true
        fi
        
        # List what we have for debugging
        echo "=== Reports directory structure ==="
        find reports -type f -name "*.md" -o -name "*.txt" -o -name "*.json" | sort
        echo "==================================="
        
        # Also show directory structure
        echo "=== Directory tree ==="
        find reports -type d | sort
        echo "======================"
        
        # Debug specific files the summary script looks for
        echo "=== Expected files status ==="
        echo "Policy tests summary: $([ -f 'reports/policy-tests/summary.md' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "OpenTofu compliant: $([ -f 'reports/opentofu-compliance/compliant-plan-scan.md' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "OpenTofu noncompliant: $([ -f 'reports/opentofu-compliance/noncompliant-plan-scan.md' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "Kind validation: $([ -f 'reports/kind-cluster/validation-summary.md' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "Kube-bench summary: $([ -f 'reports/kind-cluster/kube-bench/summary.md' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "Kube-bench node scan: $([ -f 'reports/kind-cluster/kube-bench/node-scan.json' ] && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "=========================="
        
    - name: Generate comprehensive summary with kube-bench
      continue-on-error: true
      run: |
        # Give a moment for all file operations to complete
        sleep 2
        
        # Debug: Show what files are available for processing
        echo "=== Available report files for processing ==="
        find reports -type f -name "*.md" -o -name "*.txt" -o -name "*.json" 2>/dev/null | sort
        echo "============================================="
        
        chmod +x scripts/generate-summary-report.sh
        ./scripts/generate-summary-report.sh || echo "Warning: Summary generation had issues but continuing..."
        
        # Verify the executive summary was generated
        if [ -f "reports/executive-summary.md" ]; then
          echo "✅ Executive summary with kube-bench integration generated successfully"
          echo "📊 Summary preview:"
          head -20 reports/executive-summary.md
          echo ""
          echo "📏 Summary file size: $(wc -l < reports/executive-summary.md) lines"
          
          # Check if kube-bench results are included
          if grep -q "Kube-bench CIS Compliance" reports/executive-summary.md; then
            echo "🔒 Kube-bench results successfully integrated"
          else
            echo "⚠️ Kube-bench results not found in summary"
          fi
        else
          echo "❌ Executive summary was not generated"
          # Create a minimal summary if generation failed
          mkdir -p reports
          echo "# CIS EKS Compliance Executive Summary" > reports/executive-summary.md
          echo "" >> reports/executive-summary.md
          echo "**Status**: Summary generation failed" >> reports/executive-summary.md
          echo "" >> reports/executive-summary.md
          echo "## Available Reports" >> reports/executive-summary.md
          echo "- Policy tests: Check artifacts for policy-tests/summary.md" >> reports/executive-summary.md
          echo "- OpenTofu compliance: Check artifacts for opentofu-compliance/compliant-plan-scan.md" >> reports/executive-summary.md
          echo "- Kind integration: Check artifacts for kind-cluster/validation-summary.md" >> reports/executive-summary.md
          echo "- Kube-bench CIS: Check artifacts for kind-cluster/kube-bench/summary.md" >> reports/executive-summary.md
          echo "" >> reports/executive-summary.md
          echo "Please check individual test artifacts for detailed results." >> reports/executive-summary.md
          echo "📝 Created fallback summary"
        fi
        
    - name: Create final compliance report
      run: |
        # Create a combined summary
        cat > reports/comprehensive/github-actions-summary.md << 'EOF'
        # 🎯 GitHub Actions CIS EKS Compliance Test Results
        
        **Workflow**: ${{ github.workflow }}
        **Run ID**: ${{ github.run_id }}
        **Triggered by**: ${{ github.event_name }}
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        **Generated**: $(date)
        
        ## 📊 Test Results Summary
        
        | Test Suite | Status | Artifact |
        |------------|--------|----------|
        | Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | unit-test-results |
        | OpenTofu Tests | ${{ needs.opentofu-tests.result == 'success' && '✅ Passed' || (needs.opentofu-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} | opentofu-test-results |
        | Kind Cluster Tests | ${{ needs.kind-cluster-tests.result == 'success' && '✅ Passed' || (needs.kind-cluster-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} | kind-cluster-test-results |
        | Kube-bench CIS Scan | ${{ github.event.inputs.run_kube_bench != 'false' && '🔒 Enabled' || '⏭️ Skipped' }} | included in kind-cluster-test-results |
        
        ## 🔗 Links
        
        - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - **Commit**: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
        
        ## 📋 Test Results Details
        
        EOF
        
        # Add unit test results if available
        if [ -f "reports/policy-tests/summary.md" ]; then
          echo "### Unit Tests (Policy Validation)" >> reports/comprehensive/github-actions-summary.md
          echo "" >> reports/comprehensive/github-actions-summary.md
          # Extract test statistics
          sed -n '/Test Statistics/,/Performance Metrics/p' reports/policy-tests/summary.md | grep -E "^\|" >> reports/comprehensive/github-actions-summary.md || true
          echo "" >> reports/comprehensive/github-actions-summary.md
        fi
        
        # Add kube-bench results if available
        if [ -f "reports/kind-cluster/kube-bench/summary.md" ]; then
          echo "### Kube-bench CIS Compliance Scan" >> reports/comprehensive/github-actions-summary.md
          echo "" >> reports/comprehensive/github-actions-summary.md
          echo "🔒 Node-level CIS compliance validation completed" >> reports/comprehensive/github-actions-summary.md
          # Extract any summary statistics
          grep -E "^- \*\*|^✅|^❌" reports/kind-cluster/kube-bench/summary.md | head -5 >> reports/comprehensive/github-actions-summary.md || true
          echo "" >> reports/comprehensive/github-actions-summary.md
        fi
        
        # Add opentofu test results if available
        if [ -f "reports/opentofu-compliance/compliant-plan-scan.md" ]; then
          echo "### OpenTofu Compliance Tests" >> reports/comprehensive/github-actions-summary.md
          echo "" >> reports/comprehensive/github-actions-summary.md
          echo "#### Compliant Configuration" >> reports/comprehensive/github-actions-summary.md
          sed -n '/Executive Summary/,/Detailed Test Results/p' reports/opentofu-compliance/compliant-plan-scan.md | grep -E "^\|" >> reports/comprehensive/github-actions-summary.md || true
          echo "" >> reports/comprehensive/github-actions-summary.md
        fi
        
        if [ -f "reports/opentofu-compliance/noncompliant-plan-scan.md" ]; then
          echo "#### Non-Compliant Configuration" >> reports/comprehensive/github-actions-summary.md
          sed -n '/Executive Summary/,/Detailed Test Results/p' reports/opentofu-compliance/noncompliant-plan-scan.md | grep -E "^\|" >> reports/comprehensive/github-actions-summary.md || true
          echo "" >> reports/comprehensive/github-actions-summary.md
        fi
        
        # Add Kind cluster results if available
        if [ -f "reports/kind-cluster/validation-summary.md" ]; then
          echo "### Kind Cluster Integration Tests" >> reports/comprehensive/github-actions-summary.md
          echo "" >> reports/comprehensive/github-actions-summary.md
          sed -n '/Validation Statistics/,/CIS Compliance Coverage/p' reports/kind-cluster/validation-summary.md | grep -E "^\|" >> reports/comprehensive/github-actions-summary.md || true
          echo "" >> reports/comprehensive/github-actions-summary.md
        fi
        
        cat >> reports/comprehensive/github-actions-summary.md << 'EOF'
        
        ---
        
        *🤖 Generated by GitHub Actions CIS EKS Compliance Workflow with Kube-bench Integration*
        EOF
        
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-compliance-report
        path: |
          reports/
        retention-days: 90
        
    - name: Generate job summary
      run: |
        echo "## 🎯 CIS EKS Compliance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Generated**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| OpenTofu Tests | ${{ needs.opentofu-tests.result == 'success' && '✅ Passed' || (needs.opentofu-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Kind Cluster Tests | ${{ needs.kind-cluster-tests.result == 'success' && '✅ Passed' || (needs.kind-cluster-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Kube-bench CIS Scan | ${{ github.event.inputs.run_kube_bench != 'false' && '🔒 Enabled' || '⏭️ Disabled' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- **comprehensive-compliance-report**: Complete test results and reports including kube-bench CIS scans" >> $GITHUB_STEP_SUMMARY
        
        # Add detailed results if available
        if [ -f "reports/executive-summary.md" ] && [ -s "reports/executive-summary.md" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Executive Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # Include first part of executive summary
          head -50 reports/executive-summary.md >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Executive Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ Executive summary not available. Check individual test artifacts for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add kube-bench specific information
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔒 Kube-bench CIS Compliance" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "reports/kind-cluster/kube-bench/summary.md" ]; then
          echo "✅ Kube-bench CIS compliance scan completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**CIS Controls Validated:**" >> $GITHUB_STEP_SUMMARY
          echo "- 3.1.x: Worker node configuration files" >> $GITHUB_STEP_SUMMARY
          echo "- 3.2.x: Worker node kubelet configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Integration with Kyverno policies for comprehensive coverage" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Kube-bench results not found or scanning was disabled" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add test failure information if available
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Test Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for test summary files
        if [ -f "reports/policy-tests/summary.md" ]; then
          echo "#### Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # Extract the test statistics table
          sed -n '/Test Statistics/,/^$/p' reports/policy-tests/summary.md | grep -E "^\|" | head -10 >> $GITHUB_STEP_SUMMARY || echo "No statistics found" >> $GITHUB_STEP_SUMMARY
        else
          echo "#### Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "Summary file not found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "reports/opentofu-compliance/compliant-plan-scan.md" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### OpenTofu Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # Extract executive summary
          sed -n '/Executive Summary/,/^$/p' reports/opentofu-compliance/compliant-plan-scan.md | grep -E "^\|" | head -10 >> $GITHUB_STEP_SUMMARY || echo "No summary found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "reports/kind-cluster/validation-summary.md" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Kind Cluster Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          # Extract validation statistics
          sed -n '/Validation Statistics/,/^$/p' reports/kind-cluster/validation-summary.md | grep -E "^\|" | head -10 >> $GITHUB_STEP_SUMMARY || echo "No statistics found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add links to full reports
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📄 Full Reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download the **comprehensive-compliance-report** artifact for:" >> $GITHUB_STEP_SUMMARY
        echo "- Detailed test results" >> $GITHUB_STEP_SUMMARY
        echo "- Policy validation outcomes" >> $GITHUB_STEP_SUMMARY
        echo "- OpenTofu compliance analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Kind cluster validation results" >> $GITHUB_STEP_SUMMARY
        echo "- **Kube-bench CIS compliance scan results**" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # Required for SARIF upload
      contents: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'  # Skip on PRs to avoid permission issues
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Upload Trivy results as artifact (for PRs and branches)
      uses: actions/upload-artifact@v4
      if: always() && github.event_name == 'pull_request'
      with:
        name: trivy-security-scan-results
        path: 'trivy-results.sarif'
        retention-days: 30