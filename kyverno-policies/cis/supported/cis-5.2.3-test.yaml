apiVersion: kuttl.dev/v1beta1
kind: TestSuite
testDirs:
  - ./
timeout: 30
parallel: 4
---
apiVersion: v1
kind: TestStep
name: cis-5.2.3-restrict-apparmor-profiles-tests
commands:
  - script: |
      kubectl apply -f ../cis-5.2.3.yaml --dry-run=client -o yaml > policy.yaml
---
# Test Case: Compliant Pod with 'runtime/default' AppArmor profile
name: test-compliant-pod-apparmor-default
policies: [policy.yaml]
resources:
- apiVersion: v1
  kind: Pod
  metadata:
    name: compliant-pod-apparmor-default
    namespace: default
    annotations:
      container.apparmor.security.beta.kubernetes.io/nginx: runtime/default
  spec:
    containers:
    - name: nginx
      image: nginx
results:
- policy: cis-5.2.3-restrict-apparmor-profiles
  rule: check-apparmor-pods
  resource: compliant-pod-apparmor-default
  namespace: default
  kind: Pod
  result: pass
---
# Test Case: Compliant Pod with 'localhost/...' AppArmor profile
name: test-compliant-pod-apparmor-localhost
policies: [policy.yaml]
resources:
- apiVersion: v1
  kind: Pod
  metadata:
    name: compliant-pod-apparmor-localhost
    namespace: default
    annotations:
      container.apparmor.security.beta.kubernetes.io/nginx: localhost/my-custom-profile
  spec:
    containers:
    - name: nginx
      image: nginx
results:
- policy: cis-5.2.3-restrict-apparmor-profiles
  rule: check-apparmor-pods
  resource: compliant-pod-apparmor-localhost
  namespace: default
  kind: Pod
  result: pass
---
# Test Case: Non-compliant Pod with 'unconfined' AppArmor profile
name: test-noncompliant-pod-apparmor-unconfined
policies: [policy.yaml]
resources:
- apiVersion: v1
  kind: Pod
  metadata:
    name: noncompliant-pod-apparmor-unconfined
    namespace: default
    annotations:
      container.apparmor.security.beta.kubernetes.io/nginx: unconfined # Not allowed
  spec:
    containers:
    - name: nginx
      image: nginx
results:
- policy: cis-5.2.3-restrict-apparmor-profiles
  rule: check-apparmor-pods
  resource: noncompliant-pod-apparmor-unconfined
  namespace: default
  kind: Pod
  result: fail
---
# Test Case: Non-compliant Pod with missing AppArmor annotation
name: test-noncompliant-pod-apparmor-missing
policies: [policy.yaml]
resources:
- apiVersion: v1
  kind: Pod
  metadata:
    name: noncompliant-pod-apparmor-missing
    namespace: default
    # No AppArmor annotations
  spec:
    containers:
    - name: nginx
      image: nginx
results:
- policy: cis-5.2.3-restrict-apparmor-profiles
  rule: check-apparmor-pods
  resource: noncompliant-pod-apparmor-missing
  namespace: default
  kind: Pod
  result: fail # Fails because the policy requires the annotation
---
# Test Case: Compliant Deployment with 'runtime/default' AppArmor profile
name: test-compliant-deployment-apparmor-default
policies: [policy.yaml]
resources:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: compliant-deployment-apparmor-default
    namespace: default
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nginx
    template:
      metadata:
        labels:
          app: nginx
        annotations:
          container.apparmor.security.beta.kubernetes.io/nginx: runtime/default
      spec:
        containers:
        - name: nginx
          image: nginx
results:
- policy: cis-5.2.3-restrict-apparmor-profiles
  rule: check-apparmor-controllers
  resource: compliant-deployment-apparmor-default
  namespace: default
  kind: Deployment
  result: pass
---
# Test Case: Non-compliant Deployment with missing AppArmor annotation
name: test-noncompliant-deployment-apparmor-missing
policies: [policy.yaml]
resources:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: noncompliant-deployment-apparmor-missing
    namespace: default
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nginx
    template:
      metadata:
        labels:
          app: nginx
        # No AppArmor annotations
      spec:
        containers:
        - name: nginx
          image: nginx
results:
- policy: cis-5.2.3-restrict-apparmor-profiles
  rule: check-apparmor-controllers
  resource: noncompliant-deployment-apparmor-missing
  namespace: default
  kind: Deployment
  result: fail
---
# Test Case: Pod in excluded namespace (kube-system)
name: test-excluded-namespace-pod-apparmor
policies: [policy.yaml]
resources:
- apiVersion: v1
  kind: Pod
  metadata:
    name: excluded-pod-apparmor
    namespace: kube-system # Excluded namespace
    # No AppArmor annotations - would fail if not excluded
  spec:
    containers:
    - name: nginx
      image: nginx
results:
- policy: cis-5.2.3-restrict-apparmor-profiles
  rule: check-apparmor-pods
  resource: excluded-pod-apparmor
  namespace: kube-system
  kind: Pod
  result: skip # Expecting skip because the namespace is excluded