# kyverno-policies/cis/cis-5.1.4-test.yaml
name: cis-5.1.4-restrict-image-registries-test
policies:
  - cis-5.1.4.yaml
resources:
  # Pass case 1: Image from approved-registry.io
  - apiVersion: v1
    kind: Pod
    metadata:
      name: pod-pass-approved-registry
    spec:
      containers:
      - name: app
        image: approved-registry.io/my-app:1.2.3 # Compliant
  # Pass case 2: Image from AWS ECR
  - apiVersion: v1
    kind: Pod
    metadata:
      name: pod-pass-ecr-registry
    spec:
      containers:
      - name: backend
        image: 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-backend:latest # Compliant
  # Pass case 3: Image from k8s.gcr.io (often needed for system components)
  - apiVersion: v1
    kind: Pod
    metadata:
      name: pod-pass-k8s-registry
    spec:
      containers:
      - name: pause
        image: k8s.gcr.io/pause:3.5 # Compliant
  # Pass case 4: Init container image from approved registry
  - apiVersion: v1
    kind: Pod
    metadata:
      name: pod-pass-init-approved
    spec:
      initContainers:
      - name: init-setup
        image: another-approved.com/setup:v1 # Compliant
      containers:
      - name: main
        image: approved-registry.io/main-app:latest # Compliant
  # Fail case 1: Image from default Docker Hub (not in the example approved list)
  - apiVersion: v1
    kind: Pod
    metadata:
      name: pod-fail-dockerhub
    spec:
      containers:
      - name: nginx
        image: nginx:latest # Non-compliant (assuming docker.io is not approved)
  # Fail case 2: Image from unapproved registry
  - apiVersion: v1
    kind: Pod
    metadata:
      name: pod-fail-unapproved-registry
    spec:
      containers:
      - name: web
        image: random-registry.com/web-app:prod # Non-compliant
  # Fail case 3: Init container image from unapproved registry
  - apiVersion: v1
    kind: Pod
    metadata:
      name: pod-fail-init-unapproved
    spec:
      initContainers:
      - name: init-fail
        image: bad-registry.org/init:latest # Non-compliant
      containers:
      - name: main
        image: approved-registry.io/main-app:latest # Main is ok, but init fails
results:
  - policy: cis-5.1.4-restrict-image-registries
    rule: validate-approved-registries
    resource: pod-pass-approved-registry
    kind: Pod
    result: pass
  - policy: cis-5.1.4-restrict-image-registries
    rule: validate-approved-registries
    resource: pod-pass-ecr-registry
    kind: Pod
    result: pass
  - policy: cis-5.1.4-restrict-image-registries
    rule: validate-approved-registries
    resource: pod-pass-k8s-registry
    kind: Pod
    result: pass
  - policy: cis-5.1.4-restrict-image-registries
    rule: validate-approved-registries
    resource: pod-pass-init-approved
    kind: Pod
    result: pass
  - policy: cis-5.1.4-restrict-image-registries
    rule: validate-approved-registries
    resource: pod-fail-dockerhub
    kind: Pod
    result: fail
  - policy: cis-5.1.4-restrict-image-registries
    rule: validate-approved-registries
    resource: pod-fail-unapproved-registry
    kind: Pod
    result: fail
  - policy: cis-5.1.4-restrict-image-registries
    rule: validate-approved-registries
    resource: pod-fail-init-unapproved
    kind: Pod
    result: fail