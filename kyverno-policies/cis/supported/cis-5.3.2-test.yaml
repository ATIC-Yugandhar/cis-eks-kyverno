apiVersion: kuttl.dev/v1beta1
kind: TestSuite
testDirs:
  - ./
timeout: 30
parallel: 4
---
apiVersion: v1
kind: TestStep
name: cis-5.3.2-require-networkpolicy-tests
commands:
  - script: |
      kubectl apply -f ../cis-5.3.2.yaml --dry-run=client -o yaml > policy.yaml
---
# Test Case: Namespace with a NetworkPolicy (Compliant)
name: test-namespace-with-netpol
policies: [policy.yaml]
resources:
# Create the namespace first
- apiVersion: v1
  kind: Namespace
  metadata:
    name: ns-with-netpol
# Create a NetworkPolicy in that namespace
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: default-deny-all # Example policy
    namespace: ns-with-netpol
  spec:
    podSelector: {}
    policyTypes:
    - Ingress
    - Egress
# Assert on the Namespace resource
assert:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: ns-with-netpol
# Expected result: The Namespace validation should pass because a NetworkPolicy exists.
# KUTTL doesn't directly assert policy results on existing resources easily in this context.
# We rely on the fact that if the policy *failed*, KUTTL might error or the test setup would be invalid.
# A more robust test might involve trying to create the namespace *after* the policy is applied
# and checking if it's allowed/audited correctly based on existing NetPols (complex setup).
# For simplicity, we assume the presence of the NetPol makes the Namespace compliant.
# No explicit 'results' needed here if we assume success by lack of failure.
---
# Test Case: Namespace without a NetworkPolicy (Non-Compliant)
name: test-namespace-without-netpol
policies: [policy.yaml]
resources:
# Create the namespace
- apiVersion: v1
  kind: Namespace
  metadata:
    name: ns-without-netpol
# Assert on the Namespace resource
results:
# The policy should fail validation for this namespace as no NetworkPolicy exists.
- policy: cis-5.3.2-require-networkpolicy
  rule: check-for-networkpolicy
  resource: ns-without-netpol
  kind: Namespace
  result: fail # Expecting fail because no NetworkPolicy is present
---
# Test Case: Excluded Namespace (kube-system) without NetworkPolicy
name: test-excluded-namespace-kube-system
policies: [policy.yaml]
resources:
# Simulate kube-system namespace (usually exists)
- apiVersion: v1
  kind: Namespace
  metadata:
    name: kube-system
# Assert on the Namespace resource
results:
# The policy should skip this namespace due to the exclude rule.
- policy: cis-5.3.2-require-networkpolicy
  rule: check-for-networkpolicy
  resource: kube-system
  kind: Namespace
  result: skip # Expecting skip because the namespace is excluded
---
# Test Case: Excluded Namespace (kyverno) without NetworkPolicy
name: test-excluded-namespace-kyverno
policies: [policy.yaml]
resources:
# Simulate kyverno namespace
- apiVersion: v1
  kind: Namespace
  metadata:
    name: kyverno
# Assert on the Namespace resource
results:
# The policy should skip this namespace due to the exclude rule.
- policy: cis-5.3.2-require-networkpolicy
  rule: check-for-networkpolicy
  resource: kyverno
  kind: Namespace
  result: skip # Expecting skip because the namespace is excluded